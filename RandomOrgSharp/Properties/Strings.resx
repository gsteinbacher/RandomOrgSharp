<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERROR_CODE_100" xml:space="preserve">
    <value>Method not (yet) implemented</value>
  </data>
  <data name="ERROR_CODE_101" xml:space="preserve">
    <value>Service offline; please try again later.</value>
  </data>
  <data name="ERROR_CODE_200" xml:space="preserve">
    <value>Parameter '{0}' is malformed.</value>
  </data>
  <data name="ERROR_CODE_201" xml:space="preserve">
    <value>Parameter '{0}' has illegal value.</value>
  </data>
  <data name="ERROR_CODE_202" xml:space="preserve">
    <value>Parameter '{0}' is out of range; allowable values are [{1},{2}].</value>
  </data>
  <data name="ERROR_CODE_203" xml:space="preserve">
    <value>Parameter '{0}' has length {1}, which is too long; maximum length is {2}.</value>
  </data>
  <data name="ERROR_CODE_204" xml:space="preserve">
    <value>Parameter '{0}' has length {1}, which is too short; minimum length is {2}.</value>
  </data>
  <data name="ERROR_CODE_300" xml:space="preserve">
    <value>Parameter '{0}' must be less than parameter '{1}'.</value>
  </data>
  <data name="ERROR_CODE_301" xml:space="preserve">
    <value>You requested {0} values without replacement but the domain you specified only contains {1}.</value>
  </data>
  <data name="ERROR_CODE_302" xml:space="preserve">
    <value>The value you specified for parameter '{0}' has already been taken.</value>
  </data>
  <data name="ERROR_CODE_303" xml:space="preserve">
    <value>The resource identified by '{0}' was not found.</value>
  </data>
  <data name="ERROR_CODE_304" xml:space="preserve">
    <value>The resulting data's size would be {0}, which exceeds the maximum of {1}.</value>
  </data>
  <data name="ERROR_CODE_32000" xml:space="preserve">
    <value>Unknown error: {0}.</value>
  </data>
  <data name="ERROR_CODE_400" xml:space="preserve">
    <value>The API key you specified does not exist.</value>
  </data>
  <data name="ERROR_CODE_401" xml:space="preserve">
    <value>The API key you specified is not running.</value>
  </data>
  <data name="ERROR_CODE_402" xml:space="preserve">
    <value>The operation requires {0} requests, but the API key only has {1} left.</value>
  </data>
  <data name="ERROR_CODE_403" xml:space="preserve">
    <value>The operation requires {0} bits, but the API key only has {1} left.</value>
  </data>
  <data name="ERROR_CODE_500" xml:space="preserve">
    <value>You are not subscribed to {0}.</value>
  </data>
  <data name="ERROR_CODE_501" xml:space="preserve">
    <value>The credentials '{0}' you specified are not valid or have expired.</value>
  </data>
  <data name="ERROR_CODE_502" xml:space="preserve">
    <value>Your prepaid account credit is negative; please top up and retry.</value>
  </data>
  <data name="ERROR_IDS_NOT_MATCHED" xml:space="preserve">
    <value>Id passed into the request does not match the Id returned in responseInfo.</value>
  </data>
  <data name="EXCEPTION_CANNOT_CALL_RESET" xml:space="preserve">
    <value>Reset method not allowed on this type of enumerator.</value>
  </data>
  <data name="EXCEPTION_INVALID_ARGUMENT" xml:space="preserve">
    <value>Expected parameter one to be of type {0}.</value>
  </data>
  <data name="EXCEPTION_NOT_VERIFIED" xml:space="preserve">
    <value>Results do not match originators results, tampering suspected.</value>
  </data>
  <data name="EXCEPTION_NO_DATA_RETURNED" xml:space="preserve">
    <value>No data was returned on the last call to the random.org API serivce.random.org service</value>
  </data>
  <data name="VALIDATION_APIKEY_REQUIRED" xml:space="preserve">
    <value>API Key is not found in the configuration file.  Expecting value to be located in the &amp;lt;appsettings&amp;gt; node with a name of \"APIKEY\".</value>
  </data>
  <data name="VALIDATION_BLOB_SIZE_NOT_DIVISIBLE_BY_8" xml:space="preserve">
    <value>Block size must be divisible by 8.</value>
  </data>
  <data name="VALIDATION_BLOB_SIZE_OUT_OF_RANGE" xml:space="preserve">
    <value>Blob size must be between 1 and 1048576.</value>
  </data>
  <data name="VALIDATION_CHARACTERS_ALLOWED_OUT_OF_RANGE" xml:space="preserve">
    <value>Maximum number of characters allowed is 80.</value>
  </data>
  <data name="VALIDATION_DECIMAL_PLACES_VALUE_OUT_OF_RANGE" xml:space="preserve">
    <value>Number of decimal places to return must be between 1 and 20.</value>
  </data>
  <data name="VALIDATION_MAXIMUM_VALUE_OUT_OF_RANGE" xml:space="preserve">
    <value>Maximum Value must be between -1000000000 and 1000000000.</value>
  </data>
  <data name="VALIDATION_MEAN_VALUE_OUT_OF_RANGE" xml:space="preserve">
    <value>Mean value must be between -1000000 and 1000000.</value>
  </data>
  <data name="VALIDATION_MINIMUM_VALUE_OUT_OF_RANGE" xml:space="preserve">
    <value>Minimum Value must be between -1000000000 and 1000000000.</value>
  </data>
  <data name="VALIDATION_NUMBER_ITEMS_RETURNED_OUT_OF_RANGE" xml:space="preserve">
    <value>Number of items to return must be between 1 and {0}.</value>
  </data>
  <data name="VALIDATION_RESULT_REQUIRED" xml:space="preserve">
    <value>The result is required in order to verify the signature.</value>
  </data>
  <data name="VALIDATION_SIGNATURE_REQUIRED" xml:space="preserve">
    <value>The signature value is required in order to verify the signature.</value>
  </data>
  <data name="VALIDATION_SIGNIFICANT_DIGITS_OUT_OF_RANGE" xml:space="preserve">
    <value>Standard Deviation must be between 2 and 20.</value>
  </data>
  <data name="VALIDATION_STANDARD_DEVIATION_OUT_OF_RANGE" xml:space="preserve">
    <value>Standard Deviation must be between -1000000 and 1000000.</value>
  </data>
  <data name="VALIDATION_STRING_LENGTH_OUT_OF_RANGE" xml:space="preserve">
    <value>Length of string must be between 1 and 20 characters.</value>
  </data>
</root>